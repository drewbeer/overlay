#!/usr/bin/php
<?php

$state = "";
$instance = false;
$instance_count = 10;
$DEBUG = false;

if(isset($argv[1]))$state = strtolower($argv[1]);
if(isset($argv[2]))$instance = $argv[2];

process($state,$instance);

function start($instance) {

	global $DEBUG;

        $ports = get_ports($instance);
        $wss = $ports['wss'];
        $monitor = $ports['monitor'];

	$check_webrtc_running = trim(`netstat -npa | grep ':$wss' | awk '{print \$7}'`);
	
	if(strlen($check_webrtc_running) <= 0) {

		$config = "/etc/webrtc2sip/instance_".$instance.".xml";

		if(!file_exists($config)) {

			file_put_contents($config, gen_config($instance));

		}

		//print "/usr/bin/screen -dm -S webrtc2sip$instance bash -c 'ulimit -n 65535; /usr/sbin/webrtc2sip --config=$config >> /var/log/webrtc2sip$instance.log 2>&1; exec sh'\n";

		`/usr/bin/screen -dm -S webrtc2sip$instance bash -c 'ulimit -n 65535; /usr/sbin/webrtc2sip --config=$config >> /var/log/webrtc2sip$instance.log 2>&1; exec sh'`;

	} else {
		if($DEBUG)print "Instance $instance already Running!\n";
	}


	$check_monitor_running = trim(`netstat -npa | grep ':$monitor' | awk '{print \$7}'`);
	
	if(strlen($check_monitor_running) <= 0) {

		`/usr/bin/screen -dm -S webrtc2sipMonitor$instance bash -c 'w2smonitor $monitor'`;

	} else {
		if($DEBUG)print "Instance $instance monitor already Running!\n";
	}


}

function stop($instance) {

	$ports = get_ports($instance);
	$wss = $ports['wss'];
	$monitor = $ports['monitor'];

        $check_running = trim(`netstat -npa | grep ':$wss' | awk '{print \$7}'`);
	if(strlen($check_running) > 0) {
		$pid_array = explode("/", $check_running);
		$pid = $pid_array[0];
		if(is_numeric($pid)) {
			print "Process $pid stopped!\n";
			posix_kill($pid, 9);
		} else {
			print "pid not found!\n";
		}
	}

        $check_screen_running = `ps ax | grep -i /usr/bin/SCREEN | grep webrtc2sip$instance | grep -iv grep | awk '{print \$1}'`;
	$screen_list = explode("\n", $check_screen_running);

	if(!is_array($screen_list)) {
		$screen_list = array($screen_list);
	}

	foreach($screen_list as $screen_pid) {	

		if(strlen($screen_pid) > 0) {
			if(is_numeric($screen_pid)) {
				print "Screen $screen_pid stopped!\n";
				posix_kill($screen_pid, 9);
			} else {
				print "screen pid not found!\n";
			}
		}
	}	

	$check_monitor_running = trim(`netstat -npa | grep ':$monitor' | awk '{print \$7}'`);
	if(strlen($check_monitor_running) > 0) {
		$pid_array = explode("/", $check_monitor_running);
		$pid = $pid_array[0];
		if(is_numeric($pid)) {
			print "Monitor $pid stopped!\n";
			posix_kill($pid, 9);
		} else {
			print "pid not found!\n";
		}
	}


}


function process($state, $instance) {
 
	global $instance_count;

	if($state == "start") {

		`echo 15 > /proc/sys/net/ipv4/tcp_fin_timeout`;

		if(!$instance) {
	
			print "Starting all instances\n";

			for ($x = 1; $x <= $instance_count; $x++) {
				start($x);
			}

			start_safe();

		} else if($instance) {

			print "Stopping instance $instance\n";

			start($instance);
		}

	} else if($state == "stop") {

		if(!$instance) {

			print "Stopping all instances\n";	

			for ($x = 1; $x <= $instance_count; $x++) {
				stop($x);
			}
	
			stop_safe();

		} else if($instance) {
			
			print "Stopping instance $instance\n";
			
			stop($instance);
		}

	} else if($state == "safe") {
		
		global $DEBUG;
		$DEBUG = false;

		set_time_limit(0);
		#become_daemon();
		while(1) {
                        for ($x = 1; $x <= $instance_count; $x++) {
                                start($x);
                        }
			sleep(10);
		}
	}

}

function stop_safe() {

	$safe_pid = get_safe_pid();
	if($safe_pid) {
		posix_kill($safe_pid, 9);
	}	
}


function start_safe() {
	$safe_pid = get_safe_pid();
	if(!$safe_pid) {
		`/usr/bin/screen -dm -S webrtc2sipSafe /usr/sbin/w2scmd safe`;
	}
}

function get_safe_pid() {
	return trim(`ps ax | grep 'w2scmd safe' | grep -iv grep | awk '{print \$1}'`);
}

function get_ports($instance) {

	$udp = "10000" + ($instance * 10);
	$wss = $udp+1;
	$monitor = $wss + 10000;

	return array('udp' => $udp, 'wss' => $wss, 'monitor' => $monitor);
}


/**
  * Become a daemon by forking and closing the parent
  */
function become_daemon()
{
	$pid = pcntl_fork();

	if ($pid == -1) {
		/* fork failed */
		echo "fork failure!\n";
		exit();
	} else if ($pid) {
		/* close the parent */        
		exit();
	} else {
		/* child becomes our daemon */
		posix_setsid();
		chdir('/');
		umask(0);
		return posix_getpid();
	}
}

function gen_config($instance) {

	$ports = get_ports($instance);

	$udp = $ports['udp'];
	$wss = $ports['wss'];

return "<?xml version=\"1.0\" encoding=\"utf-8\" ?>
<!-- Please check the technical guide (http://webrtc2sip.org/technical-guide-1.0.pdf) for more information on how to adjust this file -->
<config>

<debug-level>ERROR</debug-level>

<transport>udp;*;$udp</transport>
<transport>wss;*;$wss</transport>

<enable-rtp-symetric>yes</enable-rtp-symetric>
<enable-100rel>no</enable-100rel>
<enable-media-coder>yes</enable-media-coder>
<enable-videojb>yes</enable-videojb>
<video-size-pref>vga</video-size-pref>
<rtp-buffsize>65535</rtp-buffsize>
<avpf-tail-length>100;400</avpf-tail-length>
<srtp-mode>optional</srtp-mode>
<srtp-type>dtls</srtp-type>
<dtmf-type>rfc4733</dtmf-type>

<codecs>pcmu</codecs>

<stun-server>stun.l.google.com;19302</stun-server>
<enable-icestun>yes</enable-icestun>

<max-fds>-1</max-fds>

<nameserver>8.8.8.8</nameserver>

<ssl-certificates>
/etc/ssl/safesoft-io-priv.pem;
/etc/ssl/safesoft-io-pub.pem;
*;
no
</ssl-certificates>

</config>

";

}

