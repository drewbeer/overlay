From 544eebb56239849f27e594e691639ab099913ae3 Mon Sep 17 00:00:00 2001
From: Vasiliy Yeremeyev <vayerx@gmail.com>
Date: Wed, 28 May 2014 17:58:13 +0400
Subject: [PATCH] exception

---
 compiler/cpp/src/generate/t_cpp_generator.cc | 31 ++++++++++++++++++++++++++++
 test/DebugProtoTest.thrift                   |  1 +
 test/DocTest.thrift                          |  3 ++-
 test/ThriftTest.thrift                       |  3 ++-
 tutorial/cpp/CppServer.cpp                   |  4 ++--
 tutorial/d/server.d                          |  4 ++--
 tutorial/erl/server.erl                      |  4 ++--
 tutorial/java/src/CalculatorHandler.java     |  4 ++--
 tutorial/perl/PerlServer.pl                  |  4 ++--
 tutorial/php/PhpServer.php                   |  4 ++--
 tutorial/py/PythonServer.py                  |  4 ++--
 tutorial/rb/RubyServer.rb                    |  4 ++--
 tutorial/tutorial.thrift                     |  5 +++--
 13 files changed, 55 insertions(+), 20 deletions(-)

diff --git a/compiler/cpp/src/generate/t_cpp_generator.cc b/compiler/cpp/src/generate/t_cpp_generator.cc
index 9b960bf..cacdd44 100644
--- a/compiler/cpp/src/generate/t_cpp_generator.cc
+++ b/compiler/cpp/src/generate/t_cpp_generator.cc
@@ -905,6 +905,37 @@ void t_cpp_generator::generate_struct_definition(ofstream& out,
     scope_down(out);
   }
 
+  // (IW) костыль для отображения сообщения в what() исключений.
+  if (is_exception) {
+    out << endl << indent() << tstruct->get_name() << "(const std::string& a_message) : message(a_message) {"
+      << "// Если здесь вылезает ошибка, то вы забыли объявить в исключении поле 'string message'."
+      << endl << indent() << "}" << endl << endl;
+
+    indent(out) << "virtual const char* what() const throw() {" << endl;
+
+    {
+      indent_up();
+      indent(out) << "if (message.empty()) {" << endl;
+
+      {
+        indent_up();
+        indent(out) << "return \"(Empty thrift exception: " << tstruct->get_name() << ")\";" << endl;
+        indent_down();
+      }
+
+      indent(out) << "} else {" << endl;
+
+      {
+        indent_up();
+        indent(out) << "return message.c_str();" << endl;
+        scope_down(out);
+      }
+
+      scope_down(out);
+    }
+  }
+  // (IW) конец костыля.
+
   if (tstruct->annotations_.find("final") == tstruct->annotations_.end()) {
     out <<
       endl <<
diff --git a/test/DebugProtoTest.thrift b/test/DebugProtoTest.thrift
index e2bba40..70f65e3 100644
--- a/test/DebugProtoTest.thrift
+++ b/test/DebugProtoTest.thrift
@@ -225,6 +225,7 @@ const i32 MYCONST = 2
 exception ExceptionWithAMap {
   1: string blah;
   2: map<string, string> map_field;
+  3: string message;
 }
 
 service ServiceForExceptionWithAMap {
diff --git a/test/DocTest.thrift b/test/DocTest.thrift
index cb355ae..524ef7e 100644
--- a/test/DocTest.thrift
+++ b/test/DocTest.thrift
@@ -97,7 +97,8 @@ exception Xception {
 
 exception Xception2 {
   1: i32 errorCode,
-  2: Xtruct struct_thing
+  2: Xtruct struct_thing,
+  3: string message
 }
 
 /* C1 */
diff --git a/test/ThriftTest.thrift b/test/ThriftTest.thrift
index 2be53fa..3442e6d 100644
--- a/test/ThriftTest.thrift
+++ b/test/ThriftTest.thrift
@@ -111,7 +111,8 @@ exception Xception {
 
 exception Xception2 {
   1: i32 errorCode,
-  2: Xtruct struct_thing
+  2: Xtruct struct_thing,
+  3: string message
 }
 
 struct EmptyStruct {}
diff --git a/tutorial/cpp/CppServer.cpp b/tutorial/cpp/CppServer.cpp
index d0dbad9..d424449 100644
--- a/tutorial/cpp/CppServer.cpp
+++ b/tutorial/cpp/CppServer.cpp
@@ -73,7 +73,7 @@ class CalculatorHandler : public CalculatorIf {
     case Operation::DIVIDE:
       if (work.num2 == 0) {
         InvalidOperation io;
-        io.what = work.op;
+        io.what_happened = work.op;
         io.why = "Cannot divide by 0";
         throw io;
       }
@@ -81,7 +81,7 @@ class CalculatorHandler : public CalculatorIf {
       break;
     default:
       InvalidOperation io;
-      io.what = work.op;
+      io.what_happened = work.op;
       io.why = "Invalid Operation";
       throw io;
     }
diff --git a/tutorial/d/server.d b/tutorial/d/server.d
index d32b937..2778409 100644
--- a/tutorial/d/server.d
+++ b/tutorial/d/server.d
@@ -62,7 +62,7 @@ class CalculatorHandler : Calculator {
     case Operation.DIVIDE:
       if (work.num2 == 0) {
         auto io = new InvalidOperation();
-        io.what = work.op;
+        io.what_happened = work.op;
         io.why = "Cannot divide by 0";
         throw io;
       }
@@ -70,7 +70,7 @@ class CalculatorHandler : Calculator {
       break;
     default:
       auto io = new InvalidOperation();
-      io.what = work.op;
+      io.what_happened = work.op;
       io.why = "Invalid Operation";
       throw io;
     }
diff --git a/tutorial/erl/server.erl b/tutorial/erl/server.erl
index 4915606..b5814b2 100644
--- a/tutorial/erl/server.erl
+++ b/tutorial/erl/server.erl
@@ -44,12 +44,12 @@ calculate(Logid, Work) ->
         ?tutorial_Operation_MULTIPLY -> Num1 * Num2;
 
         ?tutorial_Operation_DIVIDE when Num2 == 0 ->
-          throw(#invalidOperation{what=Op, why="Cannot divide by 0"});
+          throw(#invalidOperation{what_happened=Op, why="Cannot divide by 0"});
         ?tutorial_Operation_DIVIDE ->
           Num1 div Num2;
 
         _Else ->
-          throw(#invalidOperation{what=Op, why="Invalid operation"})
+          throw(#invalidOperation{what_happened=Op, why="Invalid operation"})
     end.
 
 getStruct(Key) ->
diff --git a/tutorial/java/src/CalculatorHandler.java b/tutorial/java/src/CalculatorHandler.java
index 4216be5..7765100 100644
--- a/tutorial/java/src/CalculatorHandler.java
+++ b/tutorial/java/src/CalculatorHandler.java
@@ -58,7 +58,7 @@ public class CalculatorHandler implements Calculator.Iface {
     case DIVIDE:
       if (work.num2 == 0) {
         InvalidOperation io = new InvalidOperation();
-        io.what = work.op.getValue();
+        io.what_happened = work.op.getValue();
         io.why = "Cannot divide by 0";
         throw io;
       }
@@ -66,7 +66,7 @@ public class CalculatorHandler implements Calculator.Iface {
       break;
     default:
       InvalidOperation io = new InvalidOperation();
-      io.what = work.op.getValue();
+      io.what_happened = work.op.getValue();
       io.why = "Unknown operation";
       throw io;
     }
diff --git a/tutorial/perl/PerlServer.pl b/tutorial/perl/PerlServer.pl
index a40ec69..78ab929 100644
--- a/tutorial/perl/PerlServer.pl
+++ b/tutorial/perl/PerlServer.pl
@@ -68,14 +68,14 @@ sub calculate
     if ($num2 == 0)
     {
       my $x = new tutorial::InvalidOperation;
-      $x->what($op);
+      $x->what_happened($op);
       $x->why('Cannot divide by 0');
       die $x;
     }
     $val = $num1 / $num2;
   } else {
     my $x = new tutorial::InvalidOperation;
-    $x->what($op);
+    $x->what_happened($op);
     $x->why('Invalid operation');
     die $x;
   }
diff --git a/tutorial/php/PhpServer.php b/tutorial/php/PhpServer.php
index 4af70a4..f97b7ea 100755
--- a/tutorial/php/PhpServer.php
+++ b/tutorial/php/PhpServer.php
@@ -79,7 +79,7 @@ class CalculatorHandler implements \tutorial\CalculatorIf {
       case \tutorial\Operation::DIVIDE:
         if ($w->num2 == 0) {
           $io = new \tutorial\InvalidOperation();
-          $io->what = $w->op;
+          $io->what_happened = $w->op;
           $io->why = "Cannot divide by 0";
           throw $io;
         }
@@ -87,7 +87,7 @@ class CalculatorHandler implements \tutorial\CalculatorIf {
         break;
       default:
         $io = new \tutorial\InvalidOperation();
-        $io->what = $w->op;
+        $io->what_happened = $w->op;
         $io->why = "Invalid Operation";
         throw $io;
     }
diff --git a/tutorial/py/PythonServer.py b/tutorial/py/PythonServer.py
index cf2aab2..b77ed19 100755
--- a/tutorial/py/PythonServer.py
+++ b/tutorial/py/PythonServer.py
@@ -55,13 +55,13 @@ class CalculatorHandler:
     elif work.op == Operation.DIVIDE:
       if work.num2 == 0:
         x = InvalidOperation()
-        x.what = work.op
+        x.what_happened = work.op
         x.why = 'Cannot divide by 0'
         raise x
       val = work.num1 / work.num2
     else:
       x = InvalidOperation()
-      x.what = work.op
+      x.what_happened = work.op
       x.why = 'Invalid operation'
       raise x
 
diff --git a/tutorial/rb/RubyServer.rb b/tutorial/rb/RubyServer.rb
index 30aa7f2..f283791 100755
--- a/tutorial/rb/RubyServer.rb
+++ b/tutorial/rb/RubyServer.rb
@@ -52,14 +52,14 @@ class CalculatorHandler
     elsif work.op == Operation::DIVIDE
       if work.num2 == 0
         x = InvalidOperation.new()
-        x.what = work.op
+        x.what_happened = work.op
         x.why = "Cannot divide by 0"
         raise x
       end
       val = work.num1 / work.num2
     else
       x = InvalidOperation.new()
-      x.what = work.op
+      x.what_happened = work.op
       x.why = "Invalid operation"
       raise x
     end
diff --git a/tutorial/tutorial.thrift b/tutorial/tutorial.thrift
index 3150151..9854138 100644
--- a/tutorial/tutorial.thrift
+++ b/tutorial/tutorial.thrift
@@ -112,8 +112,9 @@ struct Work {
  * Structs can also be exceptions, if they are nasty.
  */
 exception InvalidOperation {
-  1: i32 what,
-  2: string why
+  1: i32 what_happened,
+  2: string why,
+  3: string message
 }
 
 /**
-- 
1.9.3

